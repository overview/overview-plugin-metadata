
Á
/stylesheets/index-342e9802.css
Content-Typetext/css)
Cache-Controlpublic; max-age=31536000Øhtml,body{margin:0;padding:0;font-family:"Open Sans",Helvetica,Arial,sans-serif;color:#0d1223}a{color:#50ade5;text-decoration:none}a:hover{color:#6ab9e9;text-decoration:underline}.overview-plugin-metadata-app .if-no-document{display:none;color:#918f90;font-style:italic;text-align:center}.overview-plugin-metadata-app p.add-fields{color:#666;margin:1rem 0 .5rem;font-size:.85rem;text-align:center}.overview-plugin-metadata-app table{width:100%;table-layout:fixed;border-collapse:collapse;margin-top:.75rem}.overview-plugin-metadata-app th,.overview-plugin-metadata-app td{margin:0;padding:.75rem 0 0;vertical-align:top}.overview-plugin-metadata-app th{width:30%;overflow:hidden;overflow-wrap:break-word;font-weight:bold;font-size:.9rem;padding:1.25rem .5rem 0;line-height:calc(1.25rem - 2px)}.overview-plugin-metadata-app td[data-display=TextInput]{padding-right:3px}.overview-plugin-metadata-app td{width:70%}.overview-plugin-metadata-app td input[type=text].field-value{box-sizing:border-box;width:100%;height:2rem;line-height:calc(1.5rem - 2px);padding:.25rem .5rem;border:1px solid #ccc;border-radius:3px}.overview-plugin-metadata-app td div.field-value{overflow:hidden;overflow-wrap:break-word;padding-top:.5rem;line-height:calc(1.25rem - 2px)}.overview-plugin-metadata-app td pre.field-value{margin:0;padding:.5rem;line-height:calc(1.25rem - 2px);overflow:auto;font-size:inherit;background-color:transparent;border:0}.overview-plugin-metadata-app.no-document .if-no-document{display:block}.overview-plugin-metadata-app.no-document .field-value{display:none}

/*# sourceMappingURL=/stylesheets/index-342e9802.css.map */
¤
#/stylesheets/index-342e9802.css.map 
Content-Typeapplication/json)
Cache-Controlpublic; max-age=31536000¯{"version":3,"sources":["stylesheets/stylesheets/index.scss","stylesheets/stylesheets/view.scss"],"names":[],"mappings":"AAOA,UACE,SACA,UACA,mDACA,aATkB,CAUnB,EAGC,cACA,oBAAqB,CAFvB,QAII,cACA,yBAA0B,CAC3B,8CClBC,aACA,cACA,kBACA,iBAAkB,CALtB,2CASI,WACA,oBACA,iBACA,iBAAkB,CAZtB,oCAgBI,WACA,mBACA,yBACA,iBAAkB,CAnBtB,kEAuBI,SACA,mBACA,kBAAmB,CAzBvB,iCA6BI,UACA,gBACA,yBACA,iBACA,gBACA,wBACA,+BAAgC,CAnCpC,yDAwCI,iBAAkB,CAxCtB,iCA4CI,SAAU,CA5Cd,8DA+CM,sBACA,WACA,YACA,+BACA,qBACA,sBACA,iBAAkB,CArDxB,iDAyDM,gBACA,yBACA,kBACA,+BAAgC,CA5DtC,iDAgEM,SACA,cACA,gCACA,cAEA,kBACA,6BACA,QAAS,CAvEf,0DA4EsB,aAAc,CA5EpC,uDA6EmB,YAAa,CAAK","file":"/stylesheets/index-342e9802.css","sourcesContent":["// Variables copied from Overview (even their names)\n$font-family-sans-serif: \"Open Sans\", Helvetica, Arial, sans-serif;\n$text-color: #0d1223;\n$text-muted: #918f90;\n$link-color: #50ade5;\n$link-hover-color: #6ab9e9;\n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  font-family: $font-family-sans-serif;\n  color: $text-color;\n}\n\na {\n  color: $link-color;\n  text-decoration: none;\n  &:hover {\n    color: $link-hover-color;\n    text-decoration: underline;\n  }\n}\n\n@import './view.scss'\n",".overview-plugin-metadata-app {\n  .if-no-document {\n    display: none;\n    color: $text-muted;\n    font-style: italic;\n    text-align: center;\n  }\n\n  p.add-fields {\n    color: #666;\n    margin: 1rem 0 .5rem;\n    font-size: .85rem;\n    text-align: center;\n  }\n\n  table {\n    width: 100%;\n    table-layout: fixed;\n    border-collapse: collapse;\n    margin-top: .75rem;\n  }\n\n  th, td {\n    margin: 0;\n    padding: .75rem 0 0;\n    vertical-align: top;\n  }\n\n  th {\n    width: 30%;\n    overflow: hidden;\n    overflow-wrap: break-word;\n    font-weight: bold;\n    font-size: .9rem;\n    padding: 1.25rem .5rem 0;\n    line-height: calc(1.25rem - 2px);\n  }\n\n  td[data-display=TextInput] {\n    // make <input> box-shadow visible -- otherwise it'll be cut off on the right\n    padding-right: 3px;\n  }\n\n  td {\n    width: 70%;\n\n    input[type=text].field-value {\n      box-sizing: border-box;\n      width: 100%;\n      height: 2rem;\n      line-height: calc(1.5rem - 2px);\n      padding: .25rem .5rem;\n      border: 1px solid #ccc;\n      border-radius: 3px;\n    }\n\n    div.field-value {\n      overflow: hidden;\n      overflow-wrap: break-word;\n      padding-top: .5rem;\n      line-height: calc(1.25rem - 2px);\n    }\n\n    pre.field-value {\n      margin: 0;\n      padding: .5rem;\n      line-height: calc(1.25rem - 2px);\n      overflow: auto;\n      // Override settings that might be defaults for <pre> values anywhere\n      font-size: inherit;\n      background-color: transparent;\n      border: 0;\n    }\n  }\n\n  &.no-document {\n    .if-no-document { display: block; }\n    .field-value { display: none; }\n  }\n}\n"]}
£=
/javascripts/app-1457b1ad.js&
Content-Typeapplication/javascript)
Cache-Controlpublic; max-age=31536000¯<(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"javascripts/api.js":[function(require,module,exports){
'use strict'

const escapeHtml = require('escape-html')

function runCallbacks(callbacks, value) {
  callbacks.forEach(function(callback) { callback(value) })
}

function parseQueryString() {
  const ret = {}
  let m;

  if (m = /(^|\?|&)server=([-._a-zA-Z0-9%]*)(&|$)/.exec(window.location.search)) {
    ret.server = decodeURIComponent(m[2])
  }

  return ret
}

const origin = parseQueryString().server
const _onDocumentSetChanged = []
const _onDocumentChanged = []

function sendMessage(name, data) {
  window.parent.postMessage({ call: name, args: [ data ] }, origin)
}

function receiveMessage(ev) {
  if (ev.origin !== origin) return

  switch (ev.data.event) {
    case 'notify:documentSet':
      const documentSet = ev.data.args[0]
      runCallbacks(_onDocumentSetChanged, documentSet)
      break
    case 'notify:document':
      const document = ev.data.args[0]
      runCallbacks(_onDocumentChanged, document)
      break
    default:
      // some notification we don't care about
  }
}

window.addEventListener('message', receiveMessage)

module.exports = {
  onDocumentSetChanged: function(f) { _onDocumentSetChanged.push(f) },
  onDocumentChanged: function(f) { _onDocumentChanged.push(f) },
  requestDocumentSet: function() { sendMessage('notifyDocumentSet') },
  requestDocument: function() { sendMessage('notifyDocument') },
  openMetadataSchemaEditor: function() { sendMessage('openMetadataSchemaEditor') },
  saveDocumentMetadata: function(documentId, metadata) {
    sendMessage('patchDocument', { id: documentId, metadata: metadata })
  }
}

},{"escape-html":"../node_modules/escape-html/index.js"}],"../node_modules/escape-html/index.js":[function(require,module,exports){
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */

'use strict';

/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Module exports.
 * @public
 */

module.exports = escapeHtml;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34: // "
        escape = '&quot;';
        break;
      case 38: // &
        escape = '&amp;';
        break;
      case 39: // '
        escape = '&#39;';
        break;
      case 60: // <
        escape = '&lt;';
        break;
      case 62: // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index
    ? html + str.substring(lastIndex, index)
    : html;
}

},{}],"javascripts/view.js":[function(require,module,exports){
'use strict'

const escapeHtml = require('escape-html')

function buildFieldValueHtml(field, documentValue) {
  const valueHtml = escapeHtml(documentValue)

  switch (field.display) {
    case 'Div': return `<div class="field-value">${valueHtml}</div>`
    case 'Pre': return `<pre class="field-value">${valueHtml}</pre>`
    case 'TextInput':
    default:
      return `<input type="text" class="field-value" value="${valueHtml}">`
  }
}

function buildFieldHtml(field, documentValue) {
  return [
    `<tr data-field-name="${escapeHtml(field.name)}">`,
    `<th><div class="field-name">${escapeHtml(field.name)}</div></th>`,
    `<td data-display="${field.display}">${buildFieldValueHtml(field, documentValue)}</td>`,
    '</tr>',
  ].join('')
}

function ignoreSubmit(ev) {
  ev.preventDefault()
}

module.exports = class MetadataView {
  constructor(el, api) {
    this.el = el
    this.api = api

    this.metadataSchema = { "version": 1, "fields": [] }
    this.metadata = {}
    this.documentId = null

    api.onDocumentSetChanged(documentSet => this.onDocumentSetChanged(documentSet))
    api.onDocumentChanged(document => this.onDocumentChanged(document))
    api.requestDocumentSet()
    api.requestDocument()
    el.addEventListener('submit', ignoreSubmit)
    el.addEventListener('change', () => this.saveNewMetadata())
  }

  buildHtml() {
    return [
      '<p class="if-no-document">Open a document to edit its fields</p>',
      '<table>',
      this.metadataSchema.fields.map(field => buildFieldHtml(field, this.metadata && this.metadata[field.name] || '')).join(''),
      '</table>',
      '<p class="add-fields"><a href="#" class="add-fields">Organize fields\u2026</a></p>',
    ].join('')
  }

  updateTrValue(tr) {
    const fieldName = tr.getAttribute('data-field-name')
    const field = this.metadataSchema.fields.find(field => field.name === fieldName)
    if (!field) {
      throw new Error(`Could not find field named ${fieldName} in metadataSchema`)
    }
    const td = tr.querySelector('td')
    const value = this.metadata && this.metadata[fieldName] || ''

    switch (field.display) {
      case 'Div':
      case 'Pre':
        td.innerHTML = buildFieldValueHtml(field, value)
      case 'TextInput':
      default:
        const input = tr.querySelector('input')
        if (input) {
          input.value = value
        }
    }
  }

  updateHtml() {
    this.el.classList.toggle('no-document', !this.documentId)
    const trs = Array.prototype.slice.apply(this.el.querySelectorAll('tr[data-field-name]'))
    trs.forEach(tr => this.updateTrValue(tr))
  }

  onDocumentSetChanged(documentSet) {
    this.metadataSchema = documentSet.metadataSchema
    this.el.innerHTML = this.buildHtml()
    this.el.querySelector('a.add-fields').addEventListener('click', ev => {
      ev.preventDefault()
      this.api.openMetadataSchemaEditor()
    })
  }

  onDocumentChanged(document) {
    this.documentId = document ? document.id : null
    this.metadata = document ? document.metadata : {}
    this.updateHtml()
  }

  saveNewMetadata() {
    const newValues = {}
    const trs = Array.prototype.slice.apply(this.el.querySelectorAll('tr[data-field-name]'))
    for (const tr of trs) {
      const fieldName = tr.getAttribute('data-field-name')
      const input = tr.querySelector('input')
      if (input) {
        newValues[fieldName] = input.value
      }
    }

    // We'll only update the parts of the metadata JSON that the user sees. Other
    // JSON values that aren't part of the schema won't be changed.
    const newMetadata = Object.assign({}, this.metadata, newValues)
    this.api.saveDocumentMetadata(this.documentId, newMetadata)
  }
}

},{"escape-html":"../node_modules/escape-html/index.js"}],"javascripts/app.js":[function(require,module,exports){
'use strict'

const MetadataView = require('./view')
const api = require('./api')
const el = document.getElementById('app')

new MetadataView(el, api)

},{"./api":"javascripts/api.js","./view":"javascripts/view.js"}]},{},["javascripts/app.js"])
//# sourceMappingURL=/javascripts/app-1457b1ad.js.map
H
 /javascripts/app-1457b1ad.js.map 
Content-Typeapplication/json)
Cache-Controlpublic; max-age=31536000G{"version":3,"sources":["node_modules/browser-pack/_prelude.js","javascripts/api.js","../node_modules/escape-html/index.js","javascripts/view.js","javascripts/app.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/javascripts/app-1457b1ad.js","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict'\n\nconst escapeHtml = require('escape-html')\n\nfunction runCallbacks(callbacks, value) {\n  callbacks.forEach(function(callback) { callback(value) })\n}\n\nfunction parseQueryString() {\n  const ret = {}\n  let m;\n\n  if (m = /(^|\\?|&)server=([-._a-zA-Z0-9%]*)(&|$)/.exec(window.location.search)) {\n    ret.server = decodeURIComponent(m[2])\n  }\n\n  return ret\n}\n\nconst origin = parseQueryString().server\nconst _onDocumentSetChanged = []\nconst _onDocumentChanged = []\n\nfunction sendMessage(name, data) {\n  window.parent.postMessage({ call: name, args: [ data ] }, origin)\n}\n\nfunction receiveMessage(ev) {\n  if (ev.origin !== origin) return\n\n  switch (ev.data.event) {\n    case 'notify:documentSet':\n      const documentSet = ev.data.args[0]\n      runCallbacks(_onDocumentSetChanged, documentSet)\n      break\n    case 'notify:document':\n      const document = ev.data.args[0]\n      runCallbacks(_onDocumentChanged, document)\n      break\n    default:\n      // some notification we don't care about\n  }\n}\n\nwindow.addEventListener('message', receiveMessage)\n\nmodule.exports = {\n  onDocumentSetChanged: function(f) { _onDocumentSetChanged.push(f) },\n  onDocumentChanged: function(f) { _onDocumentChanged.push(f) },\n  requestDocumentSet: function() { sendMessage('notifyDocumentSet') },\n  requestDocument: function() { sendMessage('notifyDocument') },\n  openMetadataSchemaEditor: function() { sendMessage('openMetadataSchemaEditor') },\n  saveDocumentMetadata: function(documentId, metadata) {\n    sendMessage('patchDocument', { id: documentId, metadata: metadata })\n  }\n}\n","/*!\n * escape-html\n * Copyright(c) 2012-2013 TJ Holowaychuk\n * Copyright(c) 2015 Andreas Lubbe\n * Copyright(c) 2015 Tiancheng \"Timothy\" Gu\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module variables.\n * @private\n */\n\nvar matchHtmlRegExp = /[\"'&<>]/;\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = escapeHtml;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {string} string The string to escape for inserting into HTML\n * @return {string}\n * @public\n */\n\nfunction escapeHtml(string) {\n  var str = '' + string;\n  var match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  var escape;\n  var html = '';\n  var index = 0;\n  var lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34: // \"\n        escape = '&quot;';\n        break;\n      case 38: // &\n        escape = '&amp;';\n        break;\n      case 39: // '\n        escape = '&#39;';\n        break;\n      case 60: // <\n        escape = '&lt;';\n        break;\n      case 62: // >\n        escape = '&gt;';\n        break;\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index\n    ? html + str.substring(lastIndex, index)\n    : html;\n}\n","'use strict'\n\nconst escapeHtml = require('escape-html')\n\nfunction buildFieldValueHtml(field, documentValue) {\n  const valueHtml = escapeHtml(documentValue)\n\n  switch (field.display) {\n    case 'Div': return `<div class=\"field-value\">${valueHtml}</div>`\n    case 'Pre': return `<pre class=\"field-value\">${valueHtml}</pre>`\n    case 'TextInput':\n    default:\n      return `<input type=\"text\" class=\"field-value\" value=\"${valueHtml}\">`\n  }\n}\n\nfunction buildFieldHtml(field, documentValue) {\n  return [\n    `<tr data-field-name=\"${escapeHtml(field.name)}\">`,\n    `<th><div class=\"field-name\">${escapeHtml(field.name)}</div></th>`,\n    `<td data-display=\"${field.display}\">${buildFieldValueHtml(field, documentValue)}</td>`,\n    '</tr>',\n  ].join('')\n}\n\nfunction ignoreSubmit(ev) {\n  ev.preventDefault()\n}\n\nmodule.exports = class MetadataView {\n  constructor(el, api) {\n    this.el = el\n    this.api = api\n\n    this.metadataSchema = { \"version\": 1, \"fields\": [] }\n    this.metadata = {}\n    this.documentId = null\n\n    api.onDocumentSetChanged(documentSet => this.onDocumentSetChanged(documentSet))\n    api.onDocumentChanged(document => this.onDocumentChanged(document))\n    api.requestDocumentSet()\n    api.requestDocument()\n    el.addEventListener('submit', ignoreSubmit)\n    el.addEventListener('change', () => this.saveNewMetadata())\n  }\n\n  buildHtml() {\n    return [\n      '<p class=\"if-no-document\">Open a document to edit its fields</p>',\n      '<table>',\n      this.metadataSchema.fields.map(field => buildFieldHtml(field, this.metadata && this.metadata[field.name] || '')).join(''),\n      '</table>',\n      '<p class=\"add-fields\"><a href=\"#\" class=\"add-fields\">Organize fields\\u2026</a></p>',\n    ].join('')\n  }\n\n  updateTrValue(tr) {\n    const fieldName = tr.getAttribute('data-field-name')\n    const field = this.metadataSchema.fields.find(field => field.name === fieldName)\n    if (!field) {\n      throw new Error(`Could not find field named ${fieldName} in metadataSchema`)\n    }\n    const td = tr.querySelector('td')\n    const value = this.metadata && this.metadata[fieldName] || ''\n\n    switch (field.display) {\n      case 'Div':\n      case 'Pre':\n        td.innerHTML = buildFieldValueHtml(field, value)\n      case 'TextInput':\n      default:\n        const input = tr.querySelector('input')\n        if (input) {\n          input.value = value\n        }\n    }\n  }\n\n  updateHtml() {\n    this.el.classList.toggle('no-document', !this.documentId)\n    const trs = Array.prototype.slice.apply(this.el.querySelectorAll('tr[data-field-name]'))\n    trs.forEach(tr => this.updateTrValue(tr))\n  }\n\n  onDocumentSetChanged(documentSet) {\n    this.metadataSchema = documentSet.metadataSchema\n    this.el.innerHTML = this.buildHtml()\n    this.el.querySelector('a.add-fields').addEventListener('click', ev => {\n      ev.preventDefault()\n      this.api.openMetadataSchemaEditor()\n    })\n  }\n\n  onDocumentChanged(document) {\n    this.documentId = document ? document.id : null\n    this.metadata = document ? document.metadata : {}\n    this.updateHtml()\n  }\n\n  saveNewMetadata() {\n    const newValues = {}\n    const trs = Array.prototype.slice.apply(this.el.querySelectorAll('tr[data-field-name]'))\n    for (const tr of trs) {\n      const fieldName = tr.getAttribute('data-field-name')\n      const input = tr.querySelector('input')\n      if (input) {\n        newValues[fieldName] = input.value\n      }\n    }\n\n    // We'll only update the parts of the metadata JSON that the user sees. Other\n    // JSON values that aren't part of the schema won't be changed.\n    const newMetadata = Object.assign({}, this.metadata, newValues)\n    this.api.saveDocumentMetadata(this.documentId, newMetadata)\n  }\n}\n","'use strict'\n\nconst MetadataView = require('./view')\nconst api = require('./api')\nconst el = document.getElementById('app')\n\nnew MetadataView(el, api)\n"]}
z
	/metadata 
Content-Typeapplication/json$
Cache-Controlpublic, max-age=300 
Access-Control-Allow-Origin*{}

ò
/show(
Content-Typetext/html; charset=utf-8$
Cache-Controlpublic, max-age=300<!doctype html><html lang="en"><head><meta charset="utf-8"><title>Metadata</title><link rel="stylesheet" href="/stylesheets/index-342e9802.css"></head><body><div class="overview-plugin-metadata-app" id="app"></div><script src="/javascripts/app-1457b1ad.js"></script></body></html>